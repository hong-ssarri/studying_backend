-- 조합키
CREATE TABLE TBL_FLOWER(
	FLOWER_NAME VARCHAR2(1000),
	FLOWER_COLOR VARCHAR2(1000),
	FLOWER_PRICE NUMBER,
	CONSTRAINT PK_FLOWER PRIMARY KEY(FLOWER_NAME, FLOWER_COLOR)
);

INSERT INTO TBL_FLOWER
VALUES('장미', '검정', 5000);

INSERT INTO TBL_FLOWER
VALUES('장미', '빨강', 5000);

INSERT INTO TBL_FLOWER
VALUES('튤립', '빨강', 4500);

INSERT INTO TBL_FLOWER
VALUES('튤립', '빨강', 1500); -- 오류! 조합키 2개의 컬럼이 모두 일치함.

SELECT * FROM TBL_FLOWER;

--===================================================================
-- 류호근 강사가 풀어본 모델링 실습 결과물
DROP TABLE TBL_MEMBER;
DROP TABLE TBL_BOOK;


CREATE TABLE TBL_MEMBER(
	MEMBER_ID NUMBER,
	MEMBER_NAME VARCHAR2(500) NOT NULL,
	MEMBER_AGE NUMBER NOT NULL,
	MEMBER_PHONE VARCHAR2(500) NOT NULL,
	MEMBER_ADDRESS VARCHAR2(500) NOT NULL,
	CONSTRAINT PK_MEMBER PRIMARY KEY(MEMBER_ID),
	CONSTRAINT UK_MEMBER UNIQUE(MEMBER_PHONE)
);
-- 항상 부모 테이블을 먼저 만들어야함
-- 자식 테이블은 부모 테이블을 참조하여 FK를 만드는데 이 때 참조할 부모 테이블이 없을 경우 만들어지지 않음
CREATE TABLE TBL_BOOK(
	BOOK_ID NUMBER,
	BOOK_NAME VARCHAR2(500) NOT NULL,
	BOOK_GENRE VARCHAR2(500),	
	MEMBER_ID NUMBER,
	CONSTRAINT PK_BOOK PRIMARY KEY(BOOK_ID),
	CONSTRAINT FK_BOOK FOREIGN KEY(MEMBER_ID)
	REFERENCES TBL_MEMBER(MEMBER_ID),
	CHECK(BOOK_GENRE IN ('인문학', '추리', 'IT', '로맨스'))
);



--==============================================================
-- 류호근 강사와 함께하는 모델링 예제!
-- 5. 구현
CREATE TABLE TBL_PHONE(
	PHONE_SERIAL_NUMBER VARCHAR2(500),
	PHONE_COLOR VARCHAR2(500),
	PHONE_SIZE NUMBER,
	PHONE_PRICE NUMBER,
	PHONE_PRODUCTION_DATE DATE,
	PHONE_SALE NUMBER,
	CONSTRAINT PK_PHONE PRIMARY KEY(PHONE_SERIAL_NUMBER)
);

CREATE TABLE TBL_CASE(
	CASE_SERIAL_NUMBER VARCHAR2(500),
	CASE_COLOR VARCHAR2(500),
	CASE_PRICE NUMBER,
	PHONE_SERIAL_NUMBER VARCHAR2(500),
	CONSTRAINT PK_CASE PRIMARY KEY(CASE_SERIAL_NUMBER),
	CONSTRAINT FK_CASE FOREIGN KEY(PHONE_SERIAL_NUMBER)
	REFERENCES TBL_PHONE(PHONE_SERIAL_NUMBER)
);

--========================================================================
-- 7일차에 배울 내용 미리 입력
-- 관계를 맺은 테이블 들의 DML
SELECT * FROM TBL_PHONE;
SELECT * FROM TBL_CASE;

INSERT INTO TBL_PHONE
(PHONE_SERIAL_NUMBER, PHONE_COLOR, PHONE_SIZE, PHONE_PRICE, PHONE_PRODUCTION_DATE, PHONE_SALE)
VALUES('S23-001', 'GREEN', 7, 200, '2023-02-11', 0);
-- DATE 타입의 컬럼에 문자타입의 값을 'YYYY-MM-DD' 의 형태로 넣으면
-- 자동으로 DATE 타입으로 변환되어 들어간다. (일정한 데이터타입의 형태에 맞춰서 작성하면)

INSERT INTO TBL_PHONE
(PHONE_SERIAL_NUMBER, PHONE_COLOR, PHONE_SIZE, PHONE_PRICE, PHONE_PRODUCTION_DATE, PHONE_SALE)
VALUES('S23-002', 'WHITE', 7, 200, SYSDATE, 0); -- 프로젝트할 때 가장 많이 사용하는 형태

INSERT INTO TBL_PHONE
(PHONE_SERIAL_NUMBER, PHONE_COLOR, PHONE_SIZE, PHONE_PRICE, PHONE_PRODUCTION_DATE, PHONE_SALE)
VALUES('S23-003', 'BLACK', 7, 200, '2023/02/15', 0);


-- 자식 테이블에도 값 INSERT!
INSERT INTO TBL_CASE
VALUES('ABC', 'WHITE', 10000, 'S23-004'); -- 오류! 부모에 없는 값을 참조함.

INSERT INTO TBL_CASE
VALUES('ABC', 'WHITE', 10000, 'S23-001');

INSERT INTO TBL_CASE
VALUES('DEF', 'BLACK', 12000, 'S23-002');

SELECT * FROM TBL_PHONE;
SELECT * FROM TBL_CASE;

